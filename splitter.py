import sys
import leveldb
import os
import time

xlist = ['36053', '42105', '56027', '56029', '56031', '56033', '56035', '56037', '56039', '56041', '56043', '56045', '72001', '72003', '72005', '72007', '72009', '72011', '72013', '72015', '72017', '72019', '72021', '72023', '72025', '72027', '72029', '72031', '72033', '72035', '72037', '72039', '72041', '72043', '72045', '72047', '72049', '72051', '72053', '72054', '72055', '72057', '72059', '72061', '72063', '72065', '72067', '72069', '72071', '72073', '72075', '72077', '72079', '72081', '72083', '72085', '72087', '72089', '72091', '72093', '72095', '72097', '72099', '72101', '72103', '72105', '72107', '72109', '72111', '72113', '72115', '72117', '72119', '72121', '72123', '72125', '72127', '72129', '72131', '72133', '72135', '72137', '72139', '72141', '72143', '72145', '72147', '72149', '72151', '72153']

#xlist = xlist[1:]

UNPROCESSED = ['25015', '29510', '36053', '36055', '36057', 
	'36059', '36061', '36063', '36065', '36067', '36069', 
	'36071', '36073', '36075', '36077', '36079', '36081', 
	'36083', '36085', '36087', '36089', '36091', '36093', 
	'36095', '36097', '36099', '36101', '36103', '36105', 
	'36107', '36109', '36111', '36113', '36115', '36117', 
	'36119', '36121', '36123', '40001', '42001', '42103', 
	'42105', '42107', '42109', '42111', '42113', '42115', 
	'42117', '42119', '42121', '42123', '42125', '42127', 
	'42129', '42131', '42133', '56027', '56029', '56031', 
	'56033', '56035', '56037', '56039', '56041', '56043', 
	'56045', '72001', '72003', '72005', '72007', '72009', 
	'72011', '72013', '72015', '72017', '72019', '72021', 
	'72023', '72025', '72027', '72029', '72031', '72033', 
	'72035', '72037', '72039', '72041', '72043', '72045', 
	'72047', '72049', '72051', '72053', '72054', '72055', 
	'72057', '72059', '72061', '72063', '72065', '72067', 
	'72069', '72071', '72073', '72075', '72077', '72079', 
	'72081', '72083', '72085', '72087', '72089', '72091', 
	'72093', '72095', '72097', '72099', '72101', '72103', 
	'72105', '72107', '72109', '72111', '72113', '72115', 
	'72117', '72119', '72121', '72123', '72125', '72127', 
	'72129', '72131', '72133', '72135', '72137', '72139', 
	'72141', '72143', '72145', '72147', '72149', '72151', 
	'72153']
PROBLEMS = ['25015', '25019', '25021', '25023', '25025', '25027', '26001', '26003', '26005', '26007', '26009', '26011', '26013', '26015', '26017', '26019', '26021', '26023', '26025', '26027', '26029', '26031', '26033', '26035', '26037', '26039', '26041', '26043', '26045', '26047', '26049', '26051', '26053', '26055', '26057', '26059', '26061', '26063', '26065', '26067', '26069', '26071', '26073', '26075', '26077', '26079', '26081', '26083', '26085', '26087', '26089', '26091', '26093', '26095', '26097', '26099', '26101', '26103', '26105', '26107', '26109', '26111', '26113', '26115', '26117', '26119', '26121', '26123', '26125', '26127', '26129', '26131', '26133', '26135', '26137', '26139', '26141', '26143', '26145', '26147', '26149', '26151', '26153', '26155', '26157', '26159', '26161', '26163', '26165', '27001', '27003', '27005', '27007', '27009', '27011', '27013', '27015', '27017', '27019', '27021', '27023', '27025', '27027', '27029', '27031', '27033', '27035', '27037', '27039', '27041', '27043', '27045', '27047', '27049', '27051', '27053', '27055', '27057', '27059', '27061', '27063', '27065', '27067', '27069', '27071', '27073', '27075', '27077', '27079', '27081', '27083', '27085', '27087', '27089', '27091', '27093', '27095', '27097', '27099', '27101', '27103', '27105', '27107', '27109', '27111', '27113', '27115', '27117', '27119', '27121', '27123', '27125', '27127', '27129', '27131', '27133', '27135', '27137', '27139', '27141', '27143', '27145', '27147', '27149', '27151', '27153', '27155', '27157', '27159', '27161', '27163', '27165', '27167', '27169', '27171', '27173', '28001', '28003', '28005', '28007', '28009', '28011', '28013', '28015', '28017', '28019', '28021', '28023', '28025', '28027', '28029', '28031', '28033', '28035', '28037', '28039', '28041', '28043', '28045', '28047', '28049', '28051', '28053', '28055', '28057', '28059', '28061', '28063', '28065', '28067', '28069', '28071', '28073', '28075', '28077', '28079', '28081', '28083', '28085', '28087', '28089', '28091', '28093', '28095', '28097', '28099', '28101', '28103', '28105', '28107', '28109', '28111', '28113', '28115', '28117', '28119', '28121', '28123', '28125', '28127', '28129', '28131', '28133', '28135', '28137', '28139', '28141', '28143', '28145', '28147', '28149', '28151', '28153', '28155', '28157', '28159', '28161', '28163', '29001', '29003', '29005', '29007', '29009', '29011', '29013', '29015', '29017', '29019', '29021', '29023', '29025', '29027', '29029', '29031', '29033', '29035', '29037', '29039', '29041', '29043', '29045', '29047', '29049', '29051', '29053', '29055', '29057', '29059', '29061', '29063', '29065', '29067', '29069', '29071', '29073', '29075', '29077', '29079', '29081', '29083', '29085', '29087', '29089', '29091', '29093', '29095', '29097', '29099', '29101', '29103', '29105', '29107', '29109', '29111', '29113', '29115', '29117', '29119', '29121', '29123', '29125', '29127', '29129', '29131', '29133', '29135', '29137', '29139', '29141', '29143', '29145', '29147', '29149', '29151', '29153', '29155', '29157', '29159', '29161', '29163', '29165', '29167', '29169', '29171', '29173', '29175', '29177', '29179', '29181', '29183', '29185', '29186', '29187', '29189', '29195', '29197', '29199', '29201', '29203', '29205', '29207', '29209', '29211', '29213', '29215', '29217', '29219', '29221', '29223', '29225', '29227', '29229', '29510', '36053', '36055', '36057', '36059', '36061', '36063', '36065', '36067', '36069', '36071', '36073', '36075', '36077', '36079', '36081', '36083', '36085', '36087', '36089', '36091', '36093', '36095', '36097', '36099', '36101', '36103', '36105', '36107', '36109', '36111', '36113', '36115', '36117', '36119', '36121', '36123', '40001', '42001', '42005', '42007', '42009', '42011', '42013', '42015', '42017', '42019', '42021', '42023', '42025', '42027', '42029', '42031', '42033', '42035', '42037', '42039', '42041', '42043', '42045', '42047', '42049', '42051', '42053', '42055', '42057', '42059', '42061', '42063', '42065', '42067', '42069', '42071', '42073', '42075', '42077', '42079', '42081', '42083', '42085', '42087', '42089', '42091', '42093', '42095', '42097', '42099', '42101', '42103', '42105', '42107', '42109', '42111', '42113', '42115', '42117', '42119', '42121', '42123', '42125', '42127', '42129', '42131', '42133', '56027', '56029', '56031', '56033', '56035', '56037', '56039', '56041', '56043', '56045', '72001', '72003', '72005', '72007', '72009', '72011', '72013', '72015', '72017', '72019', '72021', '72023', '72025', '72027', '72029', '72031', '72033', '72035', '72037', '72039', '72041', '72043', '72045', '72047', '72049', '72051', '72053', '72054', '72055', '72057', '72059', '72061', '72063', '72065', '72067', '72069', '72071', '72073', '72075', '72077', '72079', '72081', '72083', '72085', '72087', '72089', '72091', '72093', '72095', '72097', '72099', '72101', '72103', '72105', '72107', '72109', '72111', '72113', '72115', '72117', '72119', '72121', '72123', '72125', '72127', '72129', '72131', '72133', '72135', '72137', '72139', '72141', '72143', '72145', '72147', '72149', '72151', '72153']
#PROBLEMS = set(PROBLEMS)
STATES = ['26','36']


def multipleFolderIterator(listOfDirs):
    files = []
    length = len(listOfDirs)
    for d in listOfDirs:
        files.append(os.listdir(d))
    a = zip(files)
    for x in a:
        assert len(x) == length, 'problem here'
        assert len(set(x)) == 1, 'problem over there'
        for d in listOfDirs:
            dbdict[d] = leveldb.LevelDB(os.path.join(d, x[0]))

def writeToDir(indir, key, value, oldcounty):
    county = key[:5]
    if oldcounty == county:
        pass        
        
# failed on 25015, started on 30001, failed on 36049 started on 36051, failed on 36051 started on 37001
# failed on 40001 started on 42001
# failed on 42001, started on 44001

# most recent kill was 25025
# most recent problem 260010001001 250277613001
# failed 26163
# 295101257003 295101011001
# NEXT FAIL WAS ON 36085
# new in 42105
# 56027 is problem, maybe 56025
def folderIterator(indir, startcounty= '56025', endcounty=None, startblock=None,PROBLEMS=PROBLEMS):
    """includes start, excludes endcoutny"""
    #startcounty=None
    files = os.listdir(indir)
    files = sorted(files) # make sure that we dont need sort function
    db = None
    if startcounty:
        startcountindex = files.index(startcounty)
        files = files[startcountindex:]
    print files
    if endcounty:
        endcountyindex = files.index(startcounty)
        files = files[:endcountyindex]
    #print files
    files = (os.path.join(indir, d) for d in files)
    # this is to run for the unrun files
    #PROBLEMS = [x for x in PROBLEMS if x in xlist]
    #print PROBLEMS
    #files = (os.path.join(indir, x) for x in PROBLEMS)
    for database in files:
        if db: 
            del db
        db = leveldb.LevelDB(database)
        if startblock:
            db_iter = db.RangeIter(startblock)
            startblock = None
        else:
            db_iter = db.RangeIter()
        for key, value in db_iter:
            yield key, value

def run(indatabase, outdir):
    t1 = time.time()
    db = leveldb.LevelDB(indatabase)
    start = None#'36053'
    end = None#'36054'
    db_iter = db.RangeIter(start, end)
    prevcounty = None
    batch = None
    outdb = None
    for count, (key, value) in enumerate(db_iter):
        county = key[:5]
        state = key[:2]
        
        #if county != prevcounty:
            #print county
        #if state not in STATES:
            #prevcounty = county
        #    continue
        #else: pass # print state
        count += 1
        if count % 500 == 0:
            outdb.Write(batch,sync=True)
            batch = leveldb.WriteBatch()
            #print count
        if county != prevcounty:
            if batch and outdb:
                outdb.Write(batch, sync=True)
            del outdb
            outdb = leveldb.LevelDB(os.path.join(outdir, county))
            batch = leveldb.WriteBatch()
            print prevcounty, count, time.time() - t1
            prevcounty = county
        batch.Put(key, value)
    else:
        outdb.Write(batch,sync=True)

def main():
    indatabase = sys.argv[1]
    outdir = sys.argv[2]
    os.mkdir(outdir)
    run(indatabase, outdir)

if __name__ == '__main__':
    main()

